// =============================================================================
// –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô JS –ö–û–î –î–õ–Ø ZENNOPOSTER
// –í–µ—Ä—Å–∏—è: 2.0
// –û–ø–∏—Å–∞–Ω–∏–µ: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —á–∞—Ç–æ–≤ —Å –ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
// =============================================================================

(function () {
    try {
        // === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
        const CONFIG = {
            chatAuth: "{-Variable.chatAuth-}",      // –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞
            model: "{-Variable.model-}",            // –ú–æ–¥–µ–ª—å –ò–ò (rus_girl_1, eng_girl_1, etc.)
            server: "wss://noname.chat/socket.io/", // WebSocket —Å–µ—Ä–≤–µ—Ä (–ò–ó–ú–ï–ù–ò–¢–¨ –ü–û–î –°–í–û–ô –ß–ê–¢)
            maxDialogs: 80,                         // –ú–∞–∫—Å–∏–º—É–º –¥–∏–∞–ª–æ–≥–æ–≤
            inactivityTimeout: 18000,               // –¢–∞–π–º–∞—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º—Å)
            typingDelay: [1500, 3000],             // –ó–∞–¥–µ—Ä–∂–∫–∞ typing (–º—Å)
            responseDelay: [2000, 4000],           // –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞ (–º—Å)
            reconnectDelay: 5000,                  // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–º—Å)
            searchTimeout: 20000,                  // –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞ (–º—Å)
            firstDialogTimeout: 30000,             // –¢–∞–π–º–∞—É—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ (–º—Å)
            localApiUrl: "http://127.0.0.1:8001/api/chat",    // –û—Å–Ω–æ–≤–Ω–æ–π API
            alternativeApiUrl: "http://192.168.0.49:8001/api/chat" // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API
        };

        // === –¢–†–ò–ì–ì–ï–†–´ –ó–ê–í–ï–†–®–ï–ù–ò–Ø ===
        // –°–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã, –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
        const END_TRIGGERS = [
            "http://", "https://", "www.", ".com", ".ru", ".org", ".net",
            "—Ç–≥", "—Ç–µ–ª–µ–≥—Ä–∞–º", "telegram", "@", "t.me/", "tg://",
            "–ø–µ—Ä–µ—Ö–æ–¥–∏", "—Å—Å—ã–ª–∫–∞", "–∂–º–∏", "–∫–ª–∏–∫–∞–π", "–ø–µ—Ä–µ–π–¥–∏", "–∑–∞—Ö–æ–¥–∏",
            "–∏–Ω—Å—Ç", "–∏–Ω—Å—Ç–∞", "instagram", "–≤–∫", "–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ", "facebook"
        ];

        // === –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
        if (CONFIG.chatAuth.includes("{-Variable") || CONFIG.model.includes("{-Variable")) {
            throw new Error("–ù–µ –∑–∞–º–µ–Ω–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ZennoPoster! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ chatAuth –∏ model.");
        }

        // === –°–û–°–¢–û–Ø–ù–ò–ï –ë–û–¢–ê ===
        let log = [];
        let processedPeers = [];
        let currentDialog = {
            active: false,
            peerId: null,
            messageCount: 0,
            startTime: null,
            lastMessageTime: null,
            inactivityTimer: null
        };
        let ws = null;
        let status = "start";
        let dialogCount = 0;
        let successfulDialogs = 0;
        let ackIdCounter = 422;
        let searchTimeout = null;
        const threadId = Math.random().toString(36).substr(2, 5);

        // === –£–¢–ò–õ–ò–¢–´ ===
        function logAdd(msg) {
            const time = new Date().toLocaleTimeString('ru-RU');
            const line = `[${time}] [${threadId}] ${msg}`;
            log.push(line);
            window.__zp_log = log.join("\n");
            console.log(line);
        }

        function normalize(text) {
            return text.toLowerCase().replace(/[^a-z–∞-—è0-9\s@./]/gi, '');
        }

        function getRandomDelay(range) {
            return Math.floor(Math.random() * (range[1] - range[0] + 1)) + range[0];
        }

        function hasEndTrigger(text) {
            const cleaned = normalize(text);
            return END_TRIGGERS.some(trigger => cleaned.includes(trigger));
        }

        // === –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–†–û–°–ê –ö –ò–ò ===
        function getAIResponse(peerId, message) {
            try {
                logAdd(`str: ${peerId} | –ó–∞–ø—Ä–æ—Å –∫ –ò–ò (–º–æ–¥–µ–ª—å: ${CONFIG.model})`);
                
                const requestBody = JSON.stringify({
                    model: CONFIG.model,
                    user_id: peerId,
                    message: message
                });

                let response = null;
                let apiUrl = CONFIG.localApiUrl;
                
                try {
                    // –û—Å–Ω–æ–≤–Ω–æ–π API
                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', apiUrl, false);
                    xhr.setRequestHeader('Content-Type', 'application/json');
                    xhr.send(requestBody);
                    
                    if (xhr.status === 200) {
                        response = xhr.responseText;
                    } else {
                        throw new Error(`HTTP ${xhr.status}: ${xhr.statusText}`);
                    }
                } catch (e) {
                    logAdd(`str: ${peerId} | –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API: ${e.message}`);
                    
                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API
                    apiUrl = CONFIG.alternativeApiUrl;
                    try {
                        const xhr2 = new XMLHttpRequest();
                        xhr2.open('POST', apiUrl, false);
                        xhr2.setRequestHeader('Content-Type', 'application/json');
                        xhr2.send(requestBody);
                        
                        if (xhr2.status === 200) {
                            response = xhr2.responseText;
                            logAdd(`str: ${peerId} | –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API`);
                        } else {
                            throw new Error(`HTTP ${xhr2.status}: ${xhr2.statusText}`);
                        }
                    } catch (e2) {
                        logAdd(`str: ${peerId} | –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ API: ${e2.message}`);
                        throw e2;
                    }
                }

                if (!response) {
                    throw new Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò");
                }

                const data = JSON.parse(response);
                if (!data.response) {
                    throw new Error("–ù–µ—Ç –ø–æ–ª—è 'response' –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò");
                }

                logAdd(`str: ${peerId} | –û—Ç–≤–µ—Ç: ${data.response.substring(0, 50)}...`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if (hasEndTrigger(data.response)) {
                    logAdd(`str: ${peerId} | üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!`);
                    return { response: data.response, shouldEnd: true };
                }
                
                return { response: data.response, shouldEnd: false };
            } catch (e) {
                logAdd(`str: ${peerId} | ‚ùå –û—à–∏–±–∫–∞ –ò–ò: ${e.message}`);
                return null;
            }
        }

        // === WEBSOCKET –§–£–ù–ö–¶–ò–ò ===
        function connect() {
            const url = `${CONFIG.server}?EIO=4&transport=websocket&chatAuth=${CONFIG.chatAuth}`;
            logAdd(`üöÄ –°—Ç–∞—Ä—Ç ${threadId} | –ú–æ–¥–µ–ª—å: ${CONFIG.model} | –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulDialogs}`);

            try {
                ws = new WebSocket(url);
                
                ws.onopen = () => {
                    ws.send('40');
                    logAdd(`‚úÖ WebSocket –æ—Ç–∫—Ä—ã—Ç ${threadId}`);
                    setTimeout(() => startSearch(), 1000);
                };
                
                ws.onmessage = (event) => handleMessage(event.data);
                
                ws.onclose = (event) => {
                    logAdd(`üî¥ WebSocket –∑–∞–∫—Ä—ã—Ç: ${event.code}`);
                    handleDisconnect(event.code);
                };
                
                ws.onerror = (error) => {
                    logAdd(`‚ùå WebSocket –æ—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}`);
                    handleDisconnect(1006);
                };
                
            } catch (e) {
                logAdd(`‚ùå –û—à–∏–±–∫–∞ WebSocket: ${e.message}`);
                handleDisconnect(1006);
            }
        }

        function handleDisconnect(code) {
            cleanup();
            
            if (code === 1006) {
                setTimeout(() => window.__zp_restartThread(), CONFIG.reconnectDelay);
            } else if (code === 1005 && dialogCount === 0) {
                status = "badproxy";
                window.__zp_status = status;
                window.__zp_error = "badproxy";
                logAdd(`üö´ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: –ø–ª–æ—Ö–æ–π –ø—Ä–æ–∫—Å–∏`);
            } else {
                status = "stop";
                window.__zp_status = status;
                logAdd(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: –Ω–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤`);
            }
            
            if (dialogCount < CONFIG.maxDialogs && status !== "badproxy") {
                setTimeout(reconnect, CONFIG.reconnectDelay);
            }
        }

        function cleanup() {
            if (searchTimeout) clearTimeout(searchTimeout);
            if (currentDialog.inactivityTimer) clearTimeout(currentDialog.inactivityTimer);
        }

        function reconnect() {
            if (status !== "stop" && status !== "badproxy" && dialogCount < CONFIG.maxDialogs) {
                logAdd(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ${threadId}`);
                connect();
            }
        }

        function startSearch() {
            if (ws?.readyState === WebSocket.OPEN && dialogCount < CONFIG.maxDialogs) {
                // –ò–ó–ú–ï–ù–ò–¢–¨ –ü–û–î –°–í–û–ô –ß–ê–¢: —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!
                ws.send(`42${ackIdCounter}["back:start_search",null]`);
                logAdd(`üîç –ü–æ–∏—Å–∫ –Ω–∞—á–∞—Ç ${threadId}`);
                ackIdCounter++;
                
                status = "start";
                window.__zp_status = status;
                
                if (searchTimeout) clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    status = dialogCount === 0 ? "badproxy" : "stop";
                    window.__zp_status = status;
                    logAdd(`‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞`);
                    if (ws?.readyState === WebSocket.OPEN) ws.close();
                }, dialogCount === 0 ? CONFIG.firstDialogTimeout : CONFIG.searchTimeout);
            }
        }

        function sendMessage(text) {
            if (ws?.readyState === WebSocket.OPEN && currentDialog.active) {
                // –ò–ó–ú–ï–ù–ò–¢–¨ –ü–û–î –°–í–û–ô –ß–ê–¢: —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!
                const message = JSON.stringify(["back:send_message", {
                    text, 
                    isImage: false, 
                    peerOffline: false
                }]);
                ws.send(`42${ackIdCounter}${message}`);
                logAdd(`üì§ we: ${text.substring(0, 30)}... -> ${currentDialog.peerId}`);
                ackIdCounter++;
            }
        }

        function endDialog(reason = "") {
            if (!currentDialog.active) return;
            
            const duration = Date.now() - currentDialog.startTime;
            const isSuccessful = reason.includes("—Ç—Ä–∏–≥–≥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è");
            
            logAdd(`üèÅ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω ${currentDialog.peerId} | ${reason} | ${Math.round(duration/1000)}—Å | –£—Å–ø–µ—à–Ω—ã–π: ${isSuccessful}`);
            
            if (isSuccessful) {
                successfulDialogs++;
                logAdd(`üéâ –£—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: ${successfulDialogs}`);
            }
            
            currentDialog.active = false;
            dialogCount++;
            
            if (ws?.readyState === WebSocket.OPEN) {
                // –ò–ó–ú–ï–ù–ò–¢–¨ –ü–û–î –°–í–û–ô –ß–ê–¢: –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!
                ws.send(`42${ackIdCounter}["back:stop_dialog"]`);
                ackIdCounter++;
            }
            
            cleanup();
            
            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            currentDialog = {
                active: false, peerId: null, messageCount: 0,
                startTime: null, lastMessageTime: null, inactivityTimer: null
            };
            
            if (dialogCount < CONFIG.maxDialogs) {
                setTimeout(startSearch, getRandomDelay([2000, 4000]));
            } else {
                logAdd(`üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: ${dialogCount} –¥–∏–∞–ª–æ–≥–æ–≤, ${successfulDialogs} —É—Å–ø–µ—à–Ω—ã—Ö`);
                status = "stop";
                window.__zp_status = status;
                if (ws?.readyState === WebSocket.OPEN) ws.close();
            }
        }

        // === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
        function handleMessage(data) {
            if (data === '40' || data.startsWith('0')) return;
            if (data === '2') return ws.send('3');

            if (data.startsWith('42')) {
                try {
                    let eventJson = data.slice(2);
                    let ackId = null;
                    
                    const ackMatch = eventJson.match(/^(\d+)(\[.*\]$)/);
                    if (ackMatch) {
                        ackId = ackMatch[1];
                        eventJson = ackMatch[2];
                    }
                    
                    const eventData = JSON.parse(eventJson);
                    handleEvent(eventData, ackId);
                } catch (e) {
                    logAdd(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${e.message}`);
                }
            }
        }

        function handleEvent([eventName, ...args], ackId = null) {
            switch (eventName) {
                // –ò–ó–ú–ï–ù–ò–¢–¨ –ü–û–î –°–í–û–ô –ß–ê–¢: –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!
                case 'front:start_dialog':
                    const userData = args[0];
                    const peerId = userData?.nickname || 'Unknown';
                    
                    if (processedPeers.includes(peerId)) {
                        logAdd(`üîÑ str: ${peerId} | –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫`);
                        endDialog("–ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫");
                        return;
                    }
                    
                    processedPeers.push(peerId);
                    if (processedPeers.length > 1000) {
                        processedPeers = processedPeers.slice(-500);
                    }
                    
                    currentDialog = {
                        active: true,
                        peerId: peerId,
                        messageCount: 0,
                        startTime: Date.now(),
                        lastMessageTime: Date.now(),
                        inactivityTimer: null
                    };
                    
                    logAdd(`üé¨ str: ${peerId} | –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç`);
                    status = "start";
                    window.__zp_status = status;
                    
                    if (searchTimeout) clearTimeout(searchTimeout);
                    
                    currentDialog.inactivityTimer = setTimeout(() => {
                        if (currentDialog.active) {
                            endDialog("—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω");
                        }
                    }, CONFIG.inactivityTimeout);
                    
                    if (ws?.readyState === WebSocket.OPEN) {
                        // –ò–ó–ú–ï–ù–ò–¢–¨ –ü–û–î –°–í–û–ô –ß–ê–¢: –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!
                        ws.send(`42${ackIdCounter}["back:stop_search",true]`);
                        ackIdCounter++;
                    }
                    break;

                // –ò–ó–ú–ï–ù–ò–¢–¨ –ü–û–î –°–í–û–ô –ß–ê–¢: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!
                case 'front:send_message':
                    if (!currentDialog.active) return;
                    
                    const messageData = args[0];
                    if (ackId && ws?.readyState === WebSocket.OPEN) {
                        ws.send(`43${ackId}[true]`);
                    }
                    
                    if (messageData?.system || messageData?.isImage) return;
                    const text = messageData?.text;
                    if (!text) return;

                    logAdd(`üì• str: ${currentDialog.peerId} | ${text.substring(0, 50)}...`);

                    currentDialog.messageCount++;
                    currentDialog.lastMessageTime = Date.now();
                    
                    // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if (currentDialog.inactivityTimer) clearTimeout(currentDialog.inactivityTimer);
                    currentDialog.inactivityTimer = setTimeout(() => {
                        if (currentDialog.active) {
                            endDialog("—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω");
                        }
                    }, CONFIG.inactivityTimeout);

                    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
                    const aiResult = getAIResponse(currentDialog.peerId, text);
                    
                    if (aiResult && aiResult.response) {
                        const typingDelay = getRandomDelay(CONFIG.typingDelay);
                        const responseDelay = getRandomDelay(CONFIG.responseDelay);
                        
                        setTimeout(() => {
                            if (currentDialog.active && ws?.readyState === WebSocket.OPEN) {
                                // –ò–ó–ú–ï–ù–ò–¢–¨ –ü–û–î –°–í–û–ô –ß–ê–¢: –∫–æ–º–∞–Ω–¥–∞ typing –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!
                                ws.send(`42${ackIdCounter}["back:start_typing"]`);
                                ackIdCounter++;
                                
                                setTimeout(() => {
                                    if (currentDialog.active) {
                                        sendMessage(aiResult.response);
                                        
                                        // –ò–ó–ú–ï–ù–ò–¢–¨ –ü–û–î –°–í–û–ô –ß–ê–¢: –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ typing –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!
                                        ws.send(`42${ackIdCounter}["back:stop_typing"]`);
                                        ackIdCounter++;
                                        
                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                                        if (aiResult.shouldEnd) {
                                            setTimeout(() => {
                                                endDialog("—Ç—Ä–∏–≥–≥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò");
                                            }, 2000);
                                        }
                                    }
                                }, responseDelay);
                            }
                        }, typingDelay);
                    } else {
                        logAdd(`‚ùå str: ${currentDialog.peerId} | –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò`);
                    }
                    break;

                // –ò–ó–ú–ï–ù–ò–¢–¨ –ü–û–î –°–í–û–ô –ß–ê–¢: –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!
                case 'front:stop_dialog':
                    if (currentDialog.active) {
                        endDialog("—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª");
                    }
                    break;

                case 'front:peer_is_offline':
                case 'front:peer_is_inactive':
                    if (currentDialog.active) {
                        endDialog("—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω");
                    }
                    break;
            }
        }

        // === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
        logAdd(`üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ${threadId} | –ú–æ–¥–µ–ª—å: ${CONFIG.model}`);
        status = "start";
        window.__zp_status = status;
        connect();

    } catch (e) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", e);
        logAdd(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${e.message}`);
        status = "stop";
        window.__zp_status = status;
        window.__zp_error = e.message;
    }
})();

// =============================================================================
// –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ê–î–ê–ü–¢–ê–¶–ò–ò –ü–û–î –ù–û–í–´–ô –ß–ê–¢:
// =============================================================================
// 
// 1. –ò–∑–º–µ–Ω–∏—Ç–µ CONFIG.server –Ω–∞ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
// 
// 2. –ù–∞–π–¥–∏—Ç–µ –∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã WebSocket:
//    - "back:start_search" -> –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –≤ –≤–∞—à–µ–º —á–∞—Ç–µ
//    - "back:stop_search" -> –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞
//    - "back:send_message" -> –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
//    - "back:stop_dialog" -> –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
//    - "back:start_typing" -> –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
//    - "back:stop_typing" -> –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
// 
// 3. –ù–∞–π–¥–∏—Ç–µ –∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è:
//    - "front:start_dialog" -> —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
//    - "front:send_message" -> —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
//    - "front:stop_dialog" -> —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
//    - "front:peer_is_offline" -> —Å–æ–±—ã—Ç–∏–µ –æ—Ñ–ª–∞–π–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
//    - "front:peer_is_inactive" -> —Å–æ–±—ã—Ç–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
// 
// 4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–æ–≤ userData –∏ messageData
// 
// 5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ZennoPoster:
//    - {-Variable.chatAuth-} = "–≤–∞—à_—Ç–æ–∫–µ–Ω_–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
//    - {-Variable.model-} = "rus_girl_1" (–∏–ª–∏ –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å)
// 
// 6. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ END_TRIGGERS
// 
// 7. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø–µ—Ä–µ–¥ –º–∞—Å—Å–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
// 
// =============================================================================