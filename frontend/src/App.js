import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
const ModelSelector = ({ models, selectedModel, onModelChange }) => {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ —è–∑—ã–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const russianModels = models.filter(model => model.language === 'ru');
  const englishModels = models.filter(model => model.language === 'en');

  return (
    <div className="flex-1 mr-4">
      <label className="block text-sm font-medium text-gray-700 mb-2">
        ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
      </label>
      <select
        value={selectedModel}
        onChange={(e) => onModelChange(e.target.value)}
        className="w-full p-3 border-2 border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white text-gray-900"
      >
        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å...</option>
        
        {russianModels.length > 0 && (
          <optgroup label="üá∑üá∫ –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –º–æ–¥–µ–ª–∏">
            {russianModels.map((model) => (
              <option key={model.name} value={model.name}>
                {model.display_name} - {model.country}
              </option>
            ))}
          </optgroup>
        )}
        
        {englishModels.length > 0 && (
          <optgroup label="üá∫üá∏ –ê–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –º–æ–¥–µ–ª–∏">
            {englishModels.map((model) => (
              <option key={model.name} value={model.name}>
                {model.display_name} - {model.country}
              </option>
            ))}
          </optgroup>
        )}
      </select>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TestComponent = ({ selectedModel }) => {
  const [message, setMessage] = useState('');
  const [response, setResponse] = useState('');
  const [rating, setRating] = useState(5);
  const [loading, setLoading] = useState(false);

  const handleTest = async () => {
    if (!selectedModel || !message.trim()) return;
    
    setLoading(true);
    try {
      const res = await axios.post(`${API}/test`, {
        message: message.trim(),
        model: selectedModel
      });
      setResponse(res.data.response);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      setResponse('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleRating = async () => {
    if (!response || !message.trim()) return;
    
    try {
      await axios.post(`${API}/rate`, {
        user_id: 'test_user',
        message: message.trim(),
        response: response,
        rating: rating,
        model: selectedModel
      });
      alert('‚úÖ –†–µ–π—Ç–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
    }
  };

  // –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const exampleMessages = [
    "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
    "–ß—Ç–æ –ª—é–±–∏—à—å –¥–µ–ª–∞—Ç—å?",
    "–¢—ã –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è",
    "–•–æ—á—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–±–ª–∏–∂–µ",
    "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ"
  ];

  const handleExampleClick = (exampleMsg) => {
    setMessage(exampleMsg);
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-xl font-semibold mb-6 flex items-center gap-2">
        üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
      </h3>
      
      {!selectedModel && (
        <div className="text-center py-8 text-gray-500">
          <p className="text-lg">‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
          <p className="text-sm mt-2">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã—à–µ</p>
        </div>
      )}

      {selectedModel && (
        <>
          {/* –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üí° –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã:
            </label>
            <div className="flex flex-wrap gap-2">
              {exampleMessages.map((example, index) => (
                <button
                  key={index}
                  onClick={() => handleExampleClick(example)}
                  className="px-3 py-1 bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm rounded-full transition-colors"
                >
                  {example}
                </button>
              ))}
            </div>
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
            </label>
            <div className="relative">
              <input
                type="text"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞..."
                className="w-full p-3 pr-12 border-2 border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                onKeyPress={(e) => e.key === 'Enter' && handleTest()}
              />
              <div className="absolute right-3 top-3 text-gray-400">
                üí¨
              </div>
            </div>
          </div>

          <button
            onClick={handleTest}
            disabled={!selectedModel || !message.trim() || loading}
            className="bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600 disabled:bg-gray-400 mb-4 font-medium transition-colors flex items-center gap-2"
          >
            {loading ? 'üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : 'üöÄ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å'}
          </button>

          {response && (
            <div className="mb-4 p-4 border-2 border-blue-100 rounded-lg bg-blue-50">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ü§ñ –û—Ç–≤–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
              </label>
              <div className="p-3 bg-white rounded-lg border-l-4 border-blue-400">
                <p className="text-gray-800">{response}</p>
              </div>
              
              <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center justify-between mb-3">
                  <label className="text-sm font-medium text-gray-700">
                    ‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ (1-10):
                  </label>
                  <span className="text-lg font-bold text-blue-600">{rating}/10</span>
                </div>
                <input
                  type="range"
                  min="1"
                  max="10"
                  value={rating}
                  onChange={(e) => setRating(parseInt(e.target.value))}
                  className="w-full mb-3"
                />
                <div className="flex justify-between text-xs text-gray-500 mb-3">
                  <span>1 (–û—á–µ–Ω—å –ø–ª–æ—Ö–æ)</span>
                  <span>5 (–ù–æ—Ä–º–∞–ª—å–Ω–æ)</span>
                  <span>10 (–û—Ç–ª–∏—á–Ω–æ)</span>
                </div>
                <button
                  onClick={handleRating}
                  className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 font-medium transition-colors flex items-center gap-2"
                >
                  üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É
                </button>
              </div>
            </div>
          )}
        </>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
const TrainingComponent = ({ selectedModel }) => {
  const [question, setQuestion] = useState('');
  const [answer, setAnswer] = useState('');
  const [priority, setPriority] = useState(5);
  const [loading, setLoading] = useState(false);

  const handleTrain = async () => {
    if (!selectedModel || !question.trim() || !answer.trim()) return;
    
    setLoading(true);
    try {
      await axios.post(`${API}/train`, {
        question: question.trim(),
        answer: answer.trim(),
        model: selectedModel,
        priority: priority
      });
      alert('‚úÖ –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      setQuestion('');
      setAnswer('');
      setPriority(5);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  // –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
  const trainingExamples = [
    {
      question: "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
      answer: "–ü—Ä–∏–≤–µ—Ç –∫—Ä–∞—Å–∞–≤—á–∏–∫! –£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –≤–∏–∂—É —Ç–∞–∫–∏—Ö –º–∏–ª—ã—Ö üòò"
    },
    {
      question: "–ß—Ç–æ –ª—é–±–∏—à—å –¥–µ–ª–∞—Ç—å?",
      answer: "–õ—é–±–ª—é —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å—Å—è... –ê –µ—â–µ –æ—á–µ–Ω—å –ª—é–±–ª—é –æ–±—â–∞—Ç—å—Å—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –º—É–∂—á–∏–Ω–∞–º–∏ üíï"
    },
    {
      question: "–¢—ã –∫—Ä–∞—Å–∏–≤–∞—è",
      answer: "–°–ø–∞—Å–∏–±–æ –º–∏–ª—ã–π! –¢—ã —Ç–∞–∫–æ–π –≥–∞–ª–∞–Ω—Ç–Ω—ã–π üòä –ê —Ç—ã —Ç–æ–∂–µ —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–π?"
    }
  ];

  const handleExampleClick = (example) => {
    setQuestion(example.question);
    setAnswer(example.answer);
  };

  const getPriorityLabel = (priority) => {
    if (priority <= 3) return "üî∏ –ù–∏–∑–∫–∏–π";
    if (priority <= 6) return "üî∂ –°—Ä–µ–¥–Ω–∏–π";
    if (priority <= 8) return "üî∏ –í—ã—Å–æ–∫–∏–π";
    return "üî• –ö—Ä–∏—Ç–∏—á–Ω—ã–π";
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-xl font-semibold mb-6 flex items-center gap-2">
        üéì –†—É—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
      </h3>
      
      {!selectedModel && (
        <div className="text-center py-8 text-gray-500">
          <p className="text-lg">‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è</p>
          <p className="text-sm mt-2">–û–±—É—á–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</p>
        </div>
      )}

      {selectedModel && (
        <>
          {/* –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è */}
          <div className="mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
            <h4 className="font-medium text-blue-800 mb-3">üí° –ü—Ä–∏–º–µ—Ä—ã –æ–±—É—á–µ–Ω–∏—è:</h4>
            <div className="space-y-2">
              {trainingExamples.map((example, index) => (
                <div
                  key={index}
                  onClick={() => handleExampleClick(example)}
                  className="p-3 bg-white border border-blue-100 rounded-lg cursor-pointer hover:border-blue-300 transition-colors"
                >
                  <div className="text-sm text-gray-600">
                    <strong>–í–æ–ø—Ä–æ—Å:</strong> {example.question}
                  </div>
                  <div className="text-sm text-blue-700 mt-1">
                    <strong>–û—Ç–≤–µ—Ç:</strong> {example.answer}
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ‚ùì –í–æ–ø—Ä–æ—Å/–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
              </label>
              <textarea
                value={question}
                onChange={(e) => setQuestion(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
                rows={3}
                className="w-full p-3 border-2 border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                üí¨ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
              </label>
              <textarea
                value={answer}
                onChange={(e) => setAnswer(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∏–≤–µ—Ç –∫—Ä–∞—Å–∞–≤—á–∏–∫! –£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ üòò"
                rows={3}
                className="w-full p-3 border-2 border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>

          <div className="mt-6">
            <label className="block text-sm font-medium text-gray-700 mb-3">
              ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—É—á–µ–Ω–∏—è: {getPriorityLabel(priority)}
            </label>
            <div className="flex items-center gap-4">
              <span className="text-sm text-gray-500">1</span>
              <input
                type="range"
                min="1"
                max="10"
                value={priority}
                onChange={(e) => setPriority(parseInt(e.target.value))}
                className="flex-1"
              />
              <span className="text-sm text-gray-500">10</span>
              <span className="text-lg font-bold text-blue-600 min-w-[2rem] text-center">
                {priority}
              </span>
            </div>
            <div className="mt-2 text-xs text-gray-500">
              –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–∞—â–µ
            </div>
          </div>

          <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
            <div className="flex items-start gap-2">
              <span className="text-yellow-600 mt-0.5">üí°</span>
              <div className="text-sm text-yellow-800">
                <strong>–°–æ–≤–µ—Ç—ã –ø–æ –æ–±—É—á–µ–Ω–∏—é:</strong>
                <ul className="mt-1 space-y-1">
                  <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏ —ç–º–æ–¥–∑–∏</li>
                  <li>‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ñ–ª–∏—Ä—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</li>
                  <li>‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (8-10) –¥–ª—è —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</li>
                  <li>‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</li>
                </ul>
              </div>
            </div>
          </div>

          <button
            onClick={handleTrain}
            disabled={!selectedModel || !question.trim() || !answer.trim() || loading}
            className="mt-6 bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg font-medium disabled:bg-gray-400 transition-colors flex items-center gap-2"
          >
            {loading ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üéì –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å'}
          </button>
        </>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
const CharacterEditor = ({ selectedModel }) => {
  const [character, setCharacter] = useState(null);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [originalCharacter, setOriginalCharacter] = useState(null);

  useEffect(() => {
    if (selectedModel) {
      loadCharacter();
    } else {
      setCharacter(null);
    }
  }, [selectedModel]);

  const loadCharacter = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`${API}/model/${selectedModel}`);
      setCharacter(response.data);
      setOriginalCharacter(JSON.parse(JSON.stringify(response.data)));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    if (!character || !selectedModel) return;
    
    setSaving(true);
    try {
      await axios.post(`${API}/model/${selectedModel}`, character);
      alert('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
      setOriginalCharacter(JSON.parse(JSON.stringify(character)));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
    } finally {
      setSaving(false);
    }
  };

  const handleReset = () => {
    if (originalCharacter) {
      setCharacter(JSON.parse(JSON.stringify(originalCharacter)));
    }
  };

  const hasChanges = () => {
    return JSON.stringify(character) !== JSON.stringify(originalCharacter);
  };

  if (!selectedModel) {
    return (
      <div className="bg-white p-6 rounded-lg shadow-md">
        <div className="text-center text-gray-500">
          <p className="text-lg">üé≠ –†–µ–¥–∞–∫—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</p>
          <p className="text-sm mt-2">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="bg-white p-6 rounded-lg shadow-md">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-2"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...</p>
        </div>
      </div>
    );
  }

  if (!character) {
    return (
      <div className="bg-white p-6 rounded-lg shadow-md">
        <p className="text-center text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</p>
      </div>
    );
  }

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold">üé≠ –†–µ–¥–∞–∫—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h3>
        {hasChanges() && (
          <span className="text-sm text-orange-600 bg-orange-100 px-2 py-1 rounded">
            –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          </span>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            üë§ –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
          </label>
          <input
            type="text"
            value={character.name}
            onChange={(e) => setCharacter({...character, name: e.target.value})}
            className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            üéÇ –í–æ–∑—Ä–∞—Å—Ç:
          </label>
          <input
            type="number"
            min="18"
            max="99"
            value={character.age}
            onChange={(e) => setCharacter({...character, age: parseInt(e.target.value)})}
            className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            üåç –°—Ç—Ä–∞–Ω–∞:
          </label>
          <input
            type="text"
            value={character.country}
            onChange={(e) => setCharacter({...character, country: e.target.value})}
            className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            üèôÔ∏è –ì–æ—Ä–æ–¥:
          </label>
          <input
            type="text"
            value={character.city}
            onChange={(e) => setCharacter({...character, city: e.target.value})}
            className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            üó£Ô∏è –Ø–∑—ã–∫:
          </label>
          <select
            value={character.language}
            onChange={(e) => setCharacter({...character, language: e.target.value})}
            className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
          >
            <option value="ru">–†—É—Å—Å–∫–∏–π</option>
            <option value="en">–ê–Ω–≥–ª–∏–π—Å–∫–∏–π</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            üì± –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:
          </label>
          <input
            type="number"
            min="3"
            max="15"
            value={character.message_count}
            onChange={(e) => setCharacter({...character, message_count: parseInt(e.target.value)})}
            className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã */}
      <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:
          </label>
          <input
            type="text"
            value={character.mood}
            onChange={(e) => setCharacter({...character, mood: e.target.value})}
            placeholder="–∏–≥—Ä–∏–≤–æ–µ, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ, –¥–µ—Ä–∑–∫–æ–µ..."
            className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            üí≠ –ò–Ω—Ç–µ—Ä–µ—Å—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):
          </label>
          <input
            type="text"
            value={character.interests.join(', ')}
            onChange={(e) => setCharacter({...character, interests: e.target.value.split(',').map(s => s.trim())})}
            placeholder="—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, —Ç–∞–Ω—Ü—ã, –º—É–∑—ã–∫–∞..."
            className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      <div className="mt-4">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          üíï –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –Ω–∞–º–µ–∫–æ–º):
        </label>
        <textarea
          value={character.semi_message}
          onChange={(e) => setCharacter({...character, semi_message: e.target.value})}
          rows={2}
          className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
        />
      </div>

      <div className="mt-4">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          üîó –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Telegram):
        </label>
        <textarea
          value={character.final_message}
          onChange={(e) => setCharacter({...character, final_message: e.target.value})}
          rows={2}
          className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
        />
      </div>

      {/* –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ */}
      <div className="mt-4">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          üé® –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):
        </label>
        <input
          type="text"
          value={character.personality_traits.join(', ')}
          onChange={(e) => setCharacter({...character, personality_traits: e.target.value.split(',').map(s => s.trim())})}
          placeholder="flirty, playful, sweet, romantic..."
          className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
        />
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <div className="mt-4 flex items-center gap-6">
        <label className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={character.use_emoji}
            onChange={(e) => setCharacter({...character, use_emoji: e.target.checked})}
            className="w-4 h-4 text-blue-600"
          />
          <span className="text-sm text-gray-700">üòÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏</span>
        </label>

        <label className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={character.learning_enabled}
            onChange={(e) => setCharacter({...character, learning_enabled: e.target.checked})}
            className="w-4 h-4 text-blue-600"
          />
          <span className="text-sm text-gray-700">üß† –û–±—É—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</span>
        </label>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="mt-6 flex gap-3">
        <button
          onClick={handleSave}
          disabled={!hasChanges() || saving}
          className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md font-medium disabled:bg-gray-400 transition-colors"
        >
          {saving ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'}
        </button>
        
        <button
          onClick={handleReset}
          disabled={!hasChanges()}
          className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md font-medium disabled:bg-gray-400 transition-colors"
        >
          üîÑ –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        </button>

        <button
          onClick={loadCharacter}
          className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md font-medium transition-colors"
        >
          üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
        </button>
      </div>
    </div>
  );
};
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç-–ø–ª–∞—Ç—Ñ–æ—Ä–º
const PlatformSettings = () => {
  const [settings, setSettings] = useState({
    default_country: '–†–æ—Å—Å–∏—è',
    default_language: 'ru',
    age_range: { min: 18, max: 35 },
    response_style: 'flirty',
    platform_type: 'dating',
    auto_adapt: true,
    message_limits: { min: 3, max: 8 },
    emoji_usage: true,
    nsfw_level: 'medium'
  });
  const [loading, setLoading] = useState(false);

  const platformTypes = [
    { value: 'dating', label: 'üíï –°–∞–π—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤' },
    { value: 'social', label: 'üí¨ –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å' },
    { value: 'adult', label: 'üîû –í–∑—Ä–æ—Å–ª—ã–π —á–∞—Ç' },
    { value: 'cam', label: 'üìπ –í–µ–±–∫–∞–º —Å–∞–π—Ç' }
  ];

  const responseStyles = [
    { value: 'flirty', label: 'üòò –§–ª–∏—Ä—Ç—É—é—â–∏–π' },
    { value: 'romantic', label: 'üíù –†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π' },
    { value: 'playful', label: 'üòú –ò–≥—Ä–∏–≤—ã–π' },
    { value: 'seductive', label: 'üî• –°–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–π' }
  ];

  const handleSave = async () => {
    setLoading(true);
    try {
      await axios.post(`${API}/platform-settings`, settings);
      alert('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
    setLoading(false);
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-xl font-semibold mb-6">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">üåç –°—Ç—Ä–∞–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</label>
          <select value={settings.default_country} onChange={(e) => setSettings({...settings, default_country: e.target.value})} 
                  className="w-full p-2 border border-gray-300 rounded-md">
            <option value="–†–æ—Å—Å–∏—è">üá∑üá∫ –†–æ—Å—Å–∏—è</option>
            <option value="–£–∫—Ä–∞–∏–Ω–∞">üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞</option>
            <option value="USA">üá∫üá∏ –°–®–ê</option>
            <option value="Germany">üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">üó£Ô∏è –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</label>
          <select value={settings.default_language} onChange={(e) => setSettings({...settings, default_language: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded-md">
            <option value="ru">üá∑üá∫ –†—É—Å—Å–∫–∏–π</option>
            <option value="en">üá∫üá∏ English</option>
            <option value="uk">üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">üì± –¢–∏–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</label>
          <select value={settings.platform_type} onChange={(e) => setSettings({...settings, platform_type: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded-md">
            {platformTypes.map(type => (
              <option key={type.value} value={type.value}>{type.label}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">üí´ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:</label>
          <select value={settings.response_style} onChange={(e) => setSettings({...settings, response_style: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded-md">
            {responseStyles.map(style => (
              <option key={style.value} value={style.value}>{style.label}</option>
            ))}
          </select>
        </div>
      </div>

      <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">üéÇ –í–æ–∑—Ä–∞—Å—Ç (–º–∏–Ω):</label>
          <input type="number" min="18" max="50" value={settings.age_range.min}
                 onChange={(e) => setSettings({...settings, age_range: {...settings.age_range, min: parseInt(e.target.value)}})}
                 className="w-full p-2 border border-gray-300 rounded-md"/>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">üéÇ –í–æ–∑—Ä–∞—Å—Ç (–º–∞–∫—Å):</label>
          <input type="number" min="18" max="50" value={settings.age_range.max}
                 onChange={(e) => setSettings({...settings, age_range: {...settings.age_range, max: parseInt(e.target.value)}})}
                 className="w-full p-2 border border-gray-300 rounded-md"/>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">üìù –ú–∞–∫—Å —Å–æ–æ–±—â–µ–Ω–∏–π:</label>
          <input type="number" min="3" max="15" value={settings.message_limits.max}
                 onChange={(e) => setSettings({...settings, message_limits: {...settings.message_limits, max: parseInt(e.target.value)}})}
                 className="w-full p-2 border border-gray-300 rounded-md"/>
        </div>
      </div>

      <div className="mt-6 flex items-center gap-6">
        <label className="flex items-center gap-2">
          <input type="checkbox" checked={settings.auto_adapt}
                 onChange={(e) => setSettings({...settings, auto_adapt: e.target.checked})}
                 className="w-4 h-4 text-blue-600"/>
          <span className="text-sm">ü§ñ –ê–≤—Ç–æ-–∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —á–∞—Ç—É</span>
        </label>
        <label className="flex items-center gap-2">
          <input type="checkbox" checked={settings.emoji_usage}
                 onChange={(e) => setSettings({...settings, emoji_usage: e.target.checked})}
                 className="w-4 h-4 text-blue-600"/>
          <span className="text-sm">üòÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏</span>
        </label>
      </div>

      <button onClick={handleSave} disabled={loading}
              className="mt-6 bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg">
        {loading ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
      </button>
    </div>
  );
};

const StatisticsComponent = () => {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadStatistics();
  }, []);

  const loadStatistics = async () => {
    try {
      const response = await axios.get(`${API}/statistics`);
      setStats(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>;
  if (!stats) return <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>;

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-lg font-semibold mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h3>
      
      {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-blue-50 p-4 rounded-lg">
          <h4 className="font-medium text-blue-900">–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤</h4>
          <p className="text-2xl font-bold text-blue-600">{stats.total_conversations}</p>
        </div>
        <div className="bg-green-50 p-4 rounded-lg">
          <h4 className="font-medium text-green-900">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h4>
          <p className="text-2xl font-bold text-green-600">{stats.total_users}</p>
        </div>
        <div className="bg-purple-50 p-4 rounded-lg">
          <h4 className="font-medium text-purple-900">–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</h4>
          <p className="text-2xl font-bold text-purple-600">{stats.system_status.models_loaded}</p>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
      <div className="mb-6">
        <h4 className="font-medium mb-2">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h4>
        <div className="flex items-center gap-4">
          <div className={`flex items-center gap-2 ${stats.system_status.database_connected ? 'text-green-600' : 'text-red-600'}`}>
            <div className={`w-3 h-3 rounded-full ${stats.system_status.database_connected ? 'bg-green-500' : 'bg-red-500'}`}></div>
            –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
          </div>
          <div className="text-blue-600">
            –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {stats.system_status.active_conversations}
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º */}
      {stats.models_stats && stats.models_stats.length > 0 && (
        <div className="mb-6">
          <h4 className="font-medium mb-2">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º</h4>
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-2 text-left">–ú–æ–¥–µ–ª—å</th>
                  <th className="px-4 py-2 text-left">–î–∏–∞–ª–æ–≥–∏</th>
                  <th className="px-4 py-2 text-left">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</th>
                </tr>
              </thead>
              <tbody>
                {stats.models_stats.map((model, index) => (
                  <tr key={index} className="border-t">
                    <td className="px-4 py-2">{model._id}</td>
                    <td className="px-4 py-2">{model.conversations}</td>
                    <td className="px-4 py-2">{model.avg_rating ? model.avg_rating.toFixed(1) : 'N/A'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* –¢–æ–ø –æ—Ç–≤–µ—Ç–æ–≤ */}
      {stats.top_responses && stats.top_responses.length > 0 && (
        <div className="mb-6">
          <h4 className="font-medium mb-2">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</h4>
          <div className="space-y-2">
            {stats.top_responses.slice(0, 5).map((response, index) => (
              <div key={index} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                <span className="text-sm truncate">{response._id}</span>
                <span className="text-sm font-medium">{response.count}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã */}
      {stats.problem_questions && stats.problem_questions.length > 0 && (
        <div>
          <h4 className="font-medium mb-2">–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–Ω–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥)</h4>
          <div className="space-y-2">
            {stats.problem_questions.slice(0, 3).map((item, index) => (
              <div key={index} className="p-2 bg-red-50 rounded">
                <div className="text-sm text-red-800">
                  <strong>–í–æ–ø—Ä–æ—Å:</strong> {item.message}
                </div>
                <div className="text-sm text-red-600">
                  <strong>–û—Ç–≤–µ—Ç:</strong> {item.response}
                </div>
                <div className="text-sm text-red-500">
                  –†–µ–π—Ç–∏–Ω–≥: {item.rating}/10 | –ú–æ–¥–µ–ª—å: {item.model}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      <button
        onClick={loadStatistics}
        className="mt-4 bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
      >
        –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      </button>
    </div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const App = () => {
  const [models, setModels] = useState([]);
  const [selectedModel, setSelectedModel] = useState('');
  const [activeTab, setActiveTab] = useState('test');
  const [loading, setLoading] = useState(true);
  const [settings, setSettings] = useState({ auto_save: true });
  const [saveStatus, setSaveStatus] = useState('');

  useEffect(() => {
    loadModels();
    loadSettings();
  }, []);

  // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∫–Ω–æ–ø–∫—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

  const loadModels = async () => {
    try {
      const response = await axios.get(`${API}/models`);
      setModels(response.data.models);
      if (response.data.models.length > 0) {
        setSelectedModel(response.data.models[0].name);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadSettings = async () => {
    try {
      const response = await axios.get(`${API}/settings`);
      setSettings(response.data);
      if (response.data.default_model) {
        setSelectedModel(response.data.default_model);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  };

  const saveSettings = async (newSettings) => {
    try {
      await axios.post(`${API}/settings`, newSettings);
      setSaveStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úì');
      setTimeout(() => setSaveStatus(''), 3000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      setSaveStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ‚úó');
      setTimeout(() => setSaveStatus(''), 3000);
    }
  };

  const handleModelChange = (modelName) => {
    setSelectedModel(modelName);
  };

  const handleSaveSettings = async () => {
    const newSettings = { 
      default_model: selectedModel,
      auto_save: false  // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    };
    setSettings(newSettings);
    await saveSettings(newSettings);
  };

  const toggleAutoSave = () => {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const newAutoSave = !settings.auto_save;
    const newSettings = { ...settings, auto_save: newAutoSave };
    setSettings(newSettings);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="container mx-auto px-4 py-8">
        <header className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-2">
            <span>ü§ñ</span>
            AI –°–µ–∫—Å-–±–æ—Ç –ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          </h1>
          <p className="text-lg text-gray-600">
            –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –¥–ª—è —á–∞—Ç-–±–æ—Ç–æ–≤
          </p>
          <div className="mt-2 text-sm text-gray-500">
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞, –æ–±—É—á–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
          </div>
        </header>

        <div className="max-w-4xl mx-auto">
          {/* –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
          <div className="bg-white p-4 rounded-lg shadow-md mb-6">
            <div className="flex items-center justify-between flex-wrap gap-4">
              <ModelSelector
                models={models}
                selectedModel={selectedModel}
                onModelChange={handleModelChange}
              />
              <div className="flex items-center gap-4">
                <button
                  onClick={handleSaveSettings}
                  className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md font-medium transition-colors"
                  disabled={!selectedModel}
                >
                  üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </button>
                {saveStatus && (
                  <div className={`text-sm font-medium ${saveStatus.includes('‚úì') ? 'text-green-600' : 'text-red-600'}`}>
                    {saveStatus}
                  </div>
                )}
              </div>
            </div>
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ */}
            {selectedModel && (
              <div className="mt-3 p-3 bg-gray-50 rounded-md">
                <p className="text-sm text-gray-600">
                  <span className="font-medium">–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å:</span> {models.find(m => m.name === selectedModel)?.display_name} 
                  <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
                    {models.find(m => m.name === selectedModel)?.language === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∞—è' : 'üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∞—è'}
                  </span>
                  <span className="ml-2 text-gray-500">({models.find(m => m.name === selectedModel)?.country})</span>
                </p>
              </div>
            )}
          </div>

          {/* –¢–∞–±—ã */}
          <div className="mb-6">
            <nav className="flex space-x-1 bg-white rounded-lg p-1">
              <button
                onClick={() => setActiveTab('test')}
                className={`flex-1 py-2 px-4 text-sm font-medium rounded-md ${
                  activeTab === 'test'
                    ? 'bg-blue-500 text-white'
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
              </button>
              <button
                onClick={() => setActiveTab('training')}
                className={`flex-1 py-2 px-4 text-sm font-medium rounded-md ${
                  activeTab === 'training'
                    ? 'bg-blue-500 text-white'
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                üéì –û–±—É—á–µ–Ω–∏–µ
              </button>
              <button
                onClick={() => setActiveTab('character')}
                className={`flex-1 py-2 px-4 text-sm font-medium rounded-md ${
                  activeTab === 'character'
                    ? 'bg-blue-500 text-white'
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂
              </button>
              <button
                onClick={() => setActiveTab('settings')}
                className={`flex-1 py-2 px-4 text-sm font-medium rounded-md ${
                  activeTab === 'settings'
                    ? 'bg-blue-500 text-white'
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
              </button>
              <button
                onClick={() => setActiveTab('statistics')}
                className={`flex-1 py-2 px-4 text-sm font-medium rounded-md ${
                  activeTab === 'statistics'
                    ? 'bg-blue-500 text-white'
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              </button>
            </nav>
          </div>

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–æ–≤ */}
          {activeTab === 'test' && <TestComponent selectedModel={selectedModel} />}
          {activeTab === 'training' && <TrainingComponent selectedModel={selectedModel} />}
          {activeTab === 'character' && <CharacterEditor selectedModel={selectedModel} />}
          {activeTab === 'statistics' && <StatisticsComponent />}
        </div>
      </div>
    </div>
  );
};

export default App;